(in-package #:cl-data-structures.common.egnat)


(defgeneric select-children (range node)
  (:method ((range egnat-range) (node egnat-subtree))
    (make-array (length (read-children node))
                :element-type 'bit
                :initial-element 1))
  (:method ((range egnat-range-around) (node egnat-subtree))
    (prune-subtrees (read-container range)
                    (read-children node)
                    (read-close-range node)
                    (read-distant-range node)
                    (read-near range)
                    (read-margin range))))


(defgeneric distance (container bucket element))


(defgeneric next-elements (range stack)
  (:method ((range egnat-range) stack)
    (bind (((cell . rest) stack)
           ((node content) cell))
      (cond ((null content)
             (add-children-to-stack range node rest))
            ((eq t content)
             (if (typep node 'egnat-node)
                 (iterate
                   (with results = '())
                   (for c in-vector (read-content node))
                   (push c results)
                   (finally (return (cons (list node results) rest))))
                 (cons (list node (list (read-content node)))
                       rest)))
            (t (cons (list node (rest content))
                     rest)))))
  (:method ((range egnat-range-around) stack)
    (bind (((cell . rest) stack)
           ((node content) cell)
           ((:slots %container %near %margin) range))
      (cond ((null content)
             (add-children-to-stack range node rest))
            ((eq t content)
             (if (typep node 'egnat-node)
                 (iterate
                   (with results = '())
                   (for c in-vector (read-content node))
                   (for distance = (distance %container %near c))
                   (when (<= distance %margin)
                     (push c results))
                   (finally (return (cons (list node results) rest))))
                 (if (<= (distance %container %near (read-content node))
                         %margin)
                     (cons (list node (list (read-content node)))
                           rest)
                     (cons (list node '())
                           rest))))
            (t (cons (list node (rest content))
                     rest))))))
